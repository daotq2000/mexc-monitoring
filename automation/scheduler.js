const cron = require('node-cron');
const StrategyGenerator = require('./strategyGenerator');
const path = require('path');

class AutomationScheduler {
    constructor() {
        this.strategyGenerator = new StrategyGenerator();
        this.config = this.strategyGenerator.config;
        this.isRunning = false;
        this.lastRun = null;
        this.nextRun = null;
        this.runCount = 0;
    }

    start() {
        if (!this.config || !this.config.automation.enabled) {
            console.log('‚ö†Ô∏è T·ª± ƒë·ªông h√≥a ƒë√£ b·ªã t·∫Øt trong config');
            return;
        }

        const intervalHours = this.config.automation.intervalHours;
        const cronExpression = `0 */${intervalHours} * * *`; // Ch·∫°y m·ªói n gi·ªù
        
        console.log(`üöÄ Kh·ªüi ƒë·ªông scheduler t·ª± ƒë·ªông h√≥a...`);
        console.log(`‚è∞ Interval: ${intervalHours} gi·ªù (${cronExpression})`);
        console.log(`üìä S·ªë coin t·ªëi ƒëa: ${this.config.automation.maxCoins}`);
        console.log(`üìà % thay ƒë·ªïi gi√° t·ªëi thi·ªÉu: ${this.config.automation.minPriceChangePercent}%`);
        console.log(`üìâ % thay ƒë·ªïi gi√° t·ªëi ƒëa: ${this.config.automation.maxPriceChangePercent}%`);
        console.log(`üí∞ Volume t·ªëi thi·ªÉu: ${this.config.automation.minVolume.toLocaleString()}`);
        
        // Ch·∫°y ngay l·∫ßn ƒë·∫ßu
        this.scheduleNextRun();
        this.runImmediately();
        
        // L√™n l·ªãch ch·∫°y t·ª± ƒë·ªông
        cron.schedule(cronExpression, () => {
            this.runScheduled();
        });
        
        console.log(`‚úÖ Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!`);
        console.log(`üîÑ L·∫ßn ch·∫°y ti·∫øp theo: ${this.nextRun.toLocaleString('vi-VN')}`);
    }

    scheduleNextRun() {
        const now = new Date();
        const intervalMs = this.config.automation.intervalHours * 60 * 60 * 1000;
        this.nextRun = new Date(now.getTime() + intervalMs);
    }

    async runImmediately() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Quy tr√¨nh ƒëang ch·∫°y, b·ªè qua l·∫ßn ch·∫°y ngay l·∫≠p t·ª©c');
            return;
        }
        
        console.log('üöÄ Ch·∫°y quy tr√¨nh t·ª± ƒë·ªông ngay l·∫≠p t·ª©c...');
        // S·ª≠ d·ª•ng setTimeout v·ªõi delay ng·∫Øn ƒë·ªÉ tr√°nh blocking
        setTimeout(() => {
            this.executeProcess();
        }, 1000);
    }

    async runScheduled() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Quy tr√¨nh ƒëang ch·∫°y, b·ªè qua l·∫ßn ch·∫°y theo l·ªãch');
            return;
        }
        
        console.log('‚è∞ Ch·∫°y quy tr√¨nh t·ª± ƒë·ªông theo l·ªãch...');
        await this.executeProcess();
    }

    async executeProcess() {
        try {
            this.isRunning = true;
            this.lastRun = new Date();
            
            console.log(`\nüîÑ L·∫ßn ch·∫°y th·ª© ${++this.runCount}`);
            console.log(`‚è∞ Th·ªùi gian b·∫Øt ƒë·∫ßu: ${this.lastRun.toLocaleString('vi-VN')}`);
            
            // Th·ª±c hi·ªán quy tr√¨nh t·ª± ƒë·ªông
            const success = await this.strategyGenerator.executeFullProcess();
            
            if (success) {
                console.log(`‚úÖ L·∫ßn ch·∫°y th·ª© ${this.runCount} th√†nh c√¥ng!`);
            } else {
                console.log(`‚ùå L·∫ßn ch·∫°y th·ª© ${this.runCount} th·∫•t b·∫°i!`);
            }
            
        } catch (error) {
            console.error(`‚ùå L·ªói trong l·∫ßn ch·∫°y th·ª© ${this.runCount}:`, error.message);
        } finally {
            this.isRunning = false;
            this.scheduleNextRun();
            
            console.log(`‚è∞ L·∫ßn ch·∫°y ti·∫øp theo: ${this.nextRun.toLocaleString('vi-VN')}`);
            console.log(`üìä Tr·∫°ng th√°i: ${this.isRunning ? 'ƒêang ch·∫°y' : 'S·∫µn s√†ng'}\n`);
        }
    }

    getStatus() {
        return {
            isRunning: this.isRunning,
            lastRun: this.lastRun,
            nextRun: this.nextRun,
            runCount: this.runCount,
            config: this.config?.automation
        };
    }

    stop() {
        console.log('üõë D·ª´ng scheduler t·ª± ƒë·ªông h√≥a...');
        // Cron s·∫Ω t·ª± ƒë·ªông d·ª´ng khi process k·∫øt th√∫c
    }
}

module.exports = AutomationScheduler;
